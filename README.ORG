* Blat

In Yiddish, בלאַט means /page/.

** Definition

Leverage pagination APIs with core.async.

** Installation

[[https://clojars.org/org.danielsz/blat/latest-version.svg]]

** Usage example

*** Example I

Given a function that knows how to operate asynchronously on a page in a pagination API, for example, the tMDB API:

#+begin_src clojure
(require '[clojure.core.async :as a])

(defn movies [query page c]
  (client/get (str api-endpoint "/search/movie") {:query-params {"api_key" api-key
                                                                 "query" query
                                                                 "page" page}
                                                  :async? true
                                                  :as :json}
              (fn [resp] (a/onto-chan c (:results (:body resp))))
              (fn [e] (a/>!! c (.getMessage e))))

#+end_src

It is then possible to quickly operate on any number of pages. 

#+begin_src clojure
(require ' [blet.core :refer [fetch]])
(fetch find 1 50)
#+end_src

*Note:* ~start~ is inclusive, while ~end~ is exclusive, like Clojure's ~range~ function.

*** Example II

Given a function that knows how to operate both synchronously and asynchronously on a page in a pagination API, for example, the tMDB API:

#+begin_src clojure
(require '[clojure.core.async :as a])

(defn movies
  ([query page]
   (-> (client/get (str api-endpoint "/search/movie") {:query-params {"api_key" api-key
                                                                     "query" query
                                                                     "page" page}
                                                      :as :json})
      :body))
  ([query page c]
  (client/get (str api-endpoint "/search/movie") {:query-params {"api_key" api-key
                                                                 "query" query
                                                                 "page" page}
                                                  :async? true
                                                  :as :json}
              (fn [resp] (a/onto-chan c (:results (:body resp))))
              (fn [e] (a/>!! c (.getMessage e))))))
#+end_src

You can then use the ~blat~ library to retrieve all pages concurrently. 

#+begin_src clojure
(require ' [blet.core :refer [fetch]])
(defn fetch-all [query]
  (let [f (partial find query)
        {results :results total :total_pages} (f 1)]
    (fetch f 2 (inc total) results)))
#+end_src

The first use of ~find~ is synchronous. It is called with two arguments, query and the first page of results. The results are destructured to get the number of total pages and the initial results. The second use of ~find~ is asynchronous via ~fetch~, which internally calls it with an arity of 3, the third argument being a channel.
  
** Video tutorial

Please [[https://www.youtube.com/watch?v=1KRWfVhbBM8][refer]] to the miniseries available on Youtube, "Exploratory programming with the TMDb API". 

** License

Distributed under the [[http://opensource.org/licenses/eclipse-1.0.php][Eclipse Public License]] (the same as Clojure) together with the [[https://996.icu/#/en_US][966.icu]] [[https://github.com/996icu/996.ICU/blob/master/LICENSE][license]].

[[https://img.shields.io/badge/link-996.icu-red.svg][https://img.shields.io/badge/link-996.icu-red.svg]]
